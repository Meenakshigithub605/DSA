class Solution {
public:
    bool ans(int n,int t,vector<int>&nums, vector<vector<int>>&dp){
        if(t==0) return true;
        if(n==0) return nums[0]==t;
        if(dp[n][t]!=-1) return dp[n][t];
        bool nottake=ans(n-1,t,nums,dp);
        bool take=false;
        if(nums[n]<=t) take=ans(n-1,t-nums[n],nums,dp);
        return dp[n][t]=nottake||take;
    }
    bool canPartition(vector<int>& nums) {
        int sum=accumulate(nums.begin(),nums.end(),0);
        if(sum%2!=0) return false;
        int n=nums.size();
        vector<vector<int>>dp(n,vector<int>(sum/2+1,-1));//same as previous,just target is sum/2
        return ans(n-1,sum/2,nums,dp); 
    }
};


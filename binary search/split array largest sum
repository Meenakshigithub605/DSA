class Solution {
public:
    bool canSplit(vector<int>& nums, int mid, int k) {
        int count = 1;
        int sum = 0;
        for (int i = 0; i < nums.size(); ++i) {
            if (sum + nums[i] > mid) {
                count++;
                sum = nums[i];
            } else {
                sum += nums[i];
            }
        }
        return count <= k;
    }

    int splitArray(vector<int>& nums, int k) {
        int left = *max_element(nums.begin(), nums.end());
        int right = accumulate(nums.begin(), nums.end(), 0);
        
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (canSplit(nums, mid, k)) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }

        return left; // or right, both are equal here
    }
};
